const burgerBtn=document.querySelector(".nav__burger-btn"),navItems=document.querySelector(".nav__items"),allNavItems=navItems.querySelectorAll(".nav__items-item"),allSections=document.querySelectorAll(".planet"),URL="data.json",handleNav=()=>{(burgerBtn.classList.contains("nav__burger-btn--active")?hideBurgerBtnClose:showBurgerBtnClose)(),burgerBtn.classList.toggle("nav__burger-btn--active"),navItems.classList.toggle("nav__items--active"),allNavItems.forEach(t=>t.addEventListener("click",()=>{burgerBtn.classList.remove("nav__burger-btn--active"),navItems.classList.remove("nav__items--active"),hideBurgerBtnClose()}))};async function handleData(){var t=await axios.get(URL);try{createSection(t.data)}catch(t){console.error(t)}}gsap.to(".hero-bg",{x:"-200vw",repeat:-1,ease:"linear",duration:60});const show=t=>{gsap.to(".planet__main , .footer",{duration:.1,opacity:0,visibility:"hidden"}),gsap.to(".main",{duration:2,right:t}),gsap.to(".planet__main , .footer",{duration:.5,delay:2,opacity:1,visibility:"visible"})},createSection=a=>{var e=Array.from(allSections);for(let t=0;t<a.length;t++){var s=document.createElement("div");s.classList.add("wrapper"),s.innerHTML=`
		<div class="mobile-btns-panel">
			<button class="mobile-btns-panel__btn">overview</button>
			<button class="mobile-btns-panel__btn">structure</button>
			<button class="mobile-btns-panel__btn">surface</button>
			<div class="border"></div>
		</div>


		<div class="planet__imgs">
			<img class="planet__imgs-img planet__imgs-img--first" src="../dist/img/icons/planet-${a[t].name.toLowerCase()}.svg"
				alt="">
			<img class="planet__imgs-img planet__imgs-img--second"
				src="../dist/img/icons/planet-${a[t].name.toLowerCase()}-internal.svg" alt="">
			<img class="planet__imgs-img planet__imgs-img--popup" src="../dist/img/icons/geology-${a[t].name.toLowerCase()}.png"
				alt="">
		</div>

		<div class="planet__main">
			<div class="planet__info">
				<h2 class="planet__info-title">${a[t].name}</h2>
				<p class="planet__info-text">${a[t].overview.content}</p>
				<p class="planet__info-source">Source: <a href="${a[t].overview.source}"
						target="_blank" rel="noopener noreferrer">Wikipedia</a> <img
						src="./dist/img/icons/icon-source.svg" alt=""></p>
			</div>
			<div class="planet__btns-panel">
				<button class="planet__btns-panel-btn"><span>01</span>overview</button>
				<button class="planet__btns-panel-btn"><span>02</span>Internal structure</button>
				<button class="planet__btns-panel-btn"><span>03</span>surface geology</button>
			</div>
		</div>
	`,e[t].appendChild(s)}},showBurgerBtnClose=(handleData(),burgerBtn.addEventListener("click",handleNav),allNavItems.forEach(a=>{a.addEventListener("click",t=>{allNavItems.forEach(t=>t.classList.remove("nav__items-item--active")),a.classList.add("nav__items-item--active");t=t.target;t.classList.contains("nav__items-item--mercury")?show("0%"):t.classList.contains("nav__items-item--venus")?show("200%"):t.classList.contains("nav__items-item--earth")?show("400%"):t.classList.contains("nav__items-item--mars")?show("600%"):t.classList.contains("nav__items-item--jupiter")?show("800%"):t.classList.contains("nav__items-item--saturn")?show("1000%"):t.classList.contains("nav__items-item--uranus")?show("1200%"):t.classList.contains("nav__items-item--neptune")&&show("1400%")})}),()=>{gsap.to(".nav__burger-btn-bars",{duration:.2,bottom:0}),gsap.to(".nav__burger-btn-bars--middle",{duration:.1,opacity:"0",bottom:0}),gsap.to(".nav__burger-btn-bars--top",{duration:.1,delay:.2,y:-7,rotation:45}),gsap.to(".nav__burger-btn-bars--bottom",{duration:.1,delay:.2,y:-7,rotation:-45})}),hideBurgerBtnClose=()=>{gsap.to(".nav__burger-btn-bars--top",{duration:.2,y:0,rotation:0}),gsap.to(".nav__burger-btn-bars--bottom",{duration:.2,y:0,rotation:0}),gsap.to(".nav__burger-btn-bars--middle",{duration:.1,delay:.3,opacity:"1"}),gsap.to(".nav__burger-btn-bars--middle",{duration:.2,delay:.3,bottom:"7px"}),gsap.to(".nav__burger-btn-bars--top",{duration:.2,delay:.3,bottom:"14px"})};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
